name: Build

on:
  push:
    branches:
      - '**'

jobs:
  build-sun-api:
    name: Build sun-api
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: C:/Users/codew/git/SunProjectDeploy/SunApi
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'

      # Google 서비스 계정 정보 주입
      - name: Inject Google Service Account
        run: |
          echo ${{ secrets.GOOGLE_PRIVATE_KEY }} | base64 --decode > service-account-key.json
        env:
          GOOGLE_TYPE: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_TYPE }}
          GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
          GOOGLE_PRIVATE_KEY_ID: ${{ secrets.GOOGLE_PRIVATE_KEY_ID }}
          GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
          GOOGLE_CLIENT_EMAIL: ${{ secrets.GOOGLE_CLIENT_EMAIL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_AUTH_URI: ${{ secrets.GOOGLE_AUTH_URI }}
          GOOGLE_TOKEN_URI: ${{ secrets.GOOGLE_TOKEN_URI }}
          GOOGLE_AUTH_PROVIDER_CERT_URL: ${{ secrets.GOOGLE_AUTH_PROVIDER_CERT_URL }}
          GOOGLE_CLIENT_CERT_URL: ${{ secrets.GOOGLE_CLIENT_CERT_URL }}

      # Clova OCR 및 문서 OCR 정보 주입
      - name: Inject Clova OCR and Document OCR Secrets
        env:
          CLOVA_OCR_URL: ${{ secrets.CLOVA_OCR_URL }}
          CLOVA_OCR_SECRETKEY: ${{ secrets.CLOVA_OCR_SECRETKEY }}
          CLOVA_DOCUMENT_OCR_URL: ${{ secrets.CLOVA_DOCUMENT_OCR_URL }}
          CLOVA_DOCUMENT_OCR_SECRETKEY: ${{ secrets.CLOVA_DOCUMENT_OCR_SECRETKEY }}
        run: |
          echo "Using Clova OCR URL: $CLOVA_OCR_URL"
          echo "Using Clova Document OCR URL: $CLOVA_DOCUMENT_OCR_URL"

      # Maven 빌드
      - name: Build with Maven
        run: |
          chmod +x mvnw
          ./mvnw verify

      # Docker 빌드 및 푸시
      - if: ${{ github.ref == 'refs/heads/main' }}
        name: Build and Publish Docker Image for sun-api
        run: |
          ./mvnw clean package jib:dockerBuild -DskipTests
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t sun-api:latest .
          docker tag sun-api:latest ${{ secrets.DOCKER_USERNAME }}/sun-api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/sun-api:latest
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_CLI_EXPERIMENTAL: enabled

  build-sun-ui:
    name: Build sun-ui
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: C:/Users/codew/git/SunProjectDeploy/sun-ui
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20.9.0
        uses: actions/setup-node@v4
        with:
          node-version: 20.9.0
          cache: 'yarn'
          cache-dependency-path: sun-ui/yarn.lock

      - name: Install dependencies
        run: yarn

      - name: Build sun-ui
        run: yarn build

      # Docker 빌드 및 푸시
      - if: ${{ github.ref == 'refs/heads/main' }}
        name: Build and Publish Docker Image for sun-ui
        run: |
          docker build -f Dockerfile.ui -t ${{ secrets.DOCKER_USERNAME }}/sun-ui .
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/sun-ui

  build-sun-db:
    name: Build sun-db
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Docker 빌드 및 푸시
      - if: ${{ github.ref == 'refs/heads/main' }}
        name: Build and Publish Docker Image for sun-db
        run: |
          docker build -f Dockerfile.db -t ${{ secrets.DOCKER_USERNAME }}/sun-db .
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/sun-db
